<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.4.1">

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/InduvidualReviewActivity.java"
            line="145"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/InduvidualReviewActivity.java"
            line="167"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/InduvidualReviewActivity.java"
            line="189"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/InduvidualReviewActivity.java"
            line="220"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="          ft = getFragmentManager().beginTransaction();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/InduvidualReviewActivity.java"
            line="282"
            column="37"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="          ft = getFragmentManager().beginTransaction();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/InduvidualReviewActivity.java"
            line="295"
            column="37"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="            ft = getFragmentManager().beginTransaction();"
        errorLine2="                                      ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MainActivity.java"
            line="144"
            column="39"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MainActivity.java"
            line="190"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MainActivity.java"
            line="213"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="          ft = getFragmentManager().beginTransaction();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MainActivity.java"
            line="235"
            column="37"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MainActivity.java"
            line="267"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="            ft = getFragmentManager().beginTransaction();"
        errorLine2="                                      ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieActivity.java"
            line="148"
            column="39"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieActivity.java"
            line="181"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieActivity.java"
            line="205"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieActivity.java"
            line="228"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="        ft = getFragmentManager().beginTransaction();"
        errorLine2="                                  ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieActivity.java"
            line="258"
            column="35"/>
    </issue>

    <issue
        id="CommitTransaction"
        severity="Warning"
        message="This transaction should be completed with a `commit()` call"
        category="Correctness"
        priority="7"
        summary="Missing `commit()` calls"
        explanation="After creating a `FragmentTransaction`, you typically need to commit it as well"
        errorLine1="          ft = getFragmentManager().beginTransaction();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieActivity.java"
            line="320"
            column="37"/>
    </issue>

    <issue
        id="ScrollViewSize"
        severity="Warning"
        message="This LinearLayout should use `android:layout_height=&quot;wrap_content&quot;`"
        category="Correctness"
        priority="7"
        summary="ScrollView size validation"
        explanation="ScrollView children must set their `layout_width` or `layout_height` attributes to `wrap_content` rather than `fill_parent` or `match_parent` in the scrolling dimension"
        errorLine1="      android:layout_height=&quot;match_parent&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="85"
            column="7"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="      if((line.toLowerCase()).startsWith(query.toLowerCase()) &amp;&amp; !query.equals(&quot;&quot;)) {"
        errorLine2="               ~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/InduvidualReviewActivity.java"
            line="315"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="      if((line.toLowerCase()).startsWith(query.toLowerCase()) &amp;&amp; !query.equals(&quot;&quot;)) {"
        errorLine2="               ~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MainActivity.java"
            line="402"
            column="16"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead"
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.

If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="      if((line.toLowerCase()).startsWith(query.toLowerCase()) &amp;&amp; !query.equals(&quot;&quot;)) {"
        errorLine2="               ~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieActivity.java"
            line="393"
            column="16"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="      convertView = inflater.inflate(R.layout.listrow, null);"
        errorLine2="                                                       ~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieAdapter.java"
            line="51"
            column="56"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="      convertView = inflater.inflate(R.layout.movierow, null);"
        errorLine2="                                                        ~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/ReviewAdapter.java"
            line="48"
            column="57"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="      convertView = inflater.inflate(R.layout.searchrow, null);"
        errorLine2="                                                         ~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/SearchObjectAdapter.java"
            line="50"
            column="58"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="`android:password` is deprecated: Use `inputType` instead"
        category="Correctness"
        priority="2"
        summary="Using deprecated resources"
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="    android:password=&quot;true&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/login.xml"
            line="21"
            column="5"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="`android:password` is deprecated: Use `inputType` instead"
        category="Correctness"
        priority="2"
        summary="Using deprecated resources"
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="        android:password=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="87"
            column="9"/>
    </issue>

    <issue
        id="Deprecated"
        severity="Warning"
        message="`android:password` is deprecated: Use `inputType` instead"
        category="Correctness"
        priority="2"
        summary="Using deprecated resources"
        explanation="Deprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You&apos;ve been warned."
        errorLine1="        android:password=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="109"
            column="9"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="85"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="116"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="137"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="161"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="172"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="196"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="211"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/AllRatingsReviewsInfo.java"
            line="226"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieInfo.java"
            line="85"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieInfo.java"
            line="110"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieInfo.java"
            line="119"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieInfo.java"
            line="128"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/MovieInfo.java"
            line="137"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/UserInfo.java"
            line="96"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/UserInfo.java"
            line="119"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/UserInfo.java"
            line="138"
            column="27"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="    Cursor c = myDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);"
        errorLine2="                          ~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/java/com/android/movieReviews/UserInfo.java"
            line="161"
            column="27"/>
    </issue>

    <issue
        id="InefficientWeight"
        severity="Warning"
        message="Use a `layout_height` of `0dp` instead of `fill_parent` for better performance"
        category="Performance"
        priority="3"
        summary="Inefficient layout weight"
        explanation="When only a single widget in a LinearLayout defines a weight, it is more efficient to assign a width/height of `0dp` to it since it will absorb all the remaining space anyway. With a declared width/height of `0dp` it does not have to measure its own size first."
        errorLine1="        android:layout_height=&quot;fill_parent&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="125"
            column="9"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/headerBlue` with a theme that also paints a background (inferred theme is `@style/AppTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="  android:background=&quot;@color/headerBlue&quot; >"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/actionbar_custom.xml"
            line="6"
            column="3"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/bodyWhite` with a theme that also paints a background (inferred theme is `@style/AppTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="  android:background=&quot;@color/bodyWhite&quot;>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/search_result_fragment.xml"
            line="6"
            column="3"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/bodyWhite` with a theme that also paints a background (inferred theme is `@style/AppTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="  android:background=&quot;@color/bodyWhite&quot;>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="6"
            column="3"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@drawable/splashlogo` with a theme that also paints a background (inferred theme is `@style/AppTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.

NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.

If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.

Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.
"
        errorLine1="  android:background=&quot;@drawable/splashlogo&quot; >"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/splash.xml"
            line="6"
            column="3"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_ab_back_mtrl_am_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_ab_back_mtrl_am_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_clear_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_clear_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_commit_search_api_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_commit_search_api_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_go_search_api_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_go_search_api_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_menu_copy_mtrl_am_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_menu_copy_mtrl_am_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_menu_cut_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_menu_cut_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_menu_moreoverflow_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_menu_moreoverflow_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_menu_paste_mtrl_am_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_menu_paste_mtrl_am_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_menu_selectall_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_menu_selectall_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_menu_share_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_menu_share_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_search_api_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_search_api_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_ic_voice_search_api_mtrl_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_ic_voice_search_api_mtrl_alpha.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.abc_spinner_mtrl_am_alpha` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/abc_spinner_mtrl_am_alpha.9.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.batmanvsuperman` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/batmanvsuperman.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.beforesunset` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/beforesunset.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.red` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="  &lt;color name=&quot;red&quot;>#F31010&lt;/color>"
        errorLine2="         ~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/values/colors.xml"
            line="6"
            column="10"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.deadpool` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/deadpool.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.error` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/error.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.ic_launcher` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/ic_launcher.png"/>
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-ldpi/ic_launcher.png"/>
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-mdpi/ic_launcher.png"/>
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-xhdpi/ic_launcher.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.main` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/main.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.mrandmrssmithposter` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/mrandmrssmithposter.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.mycousinvinny` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/mycousinvinny.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.ratingstars` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/ratingstars.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.samplemain` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/samplemain.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.search_list_background` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable/search_list_background.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.xml.searchable` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/xml/searchable.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.secondhandlions` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/secondhandlions.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.sincityposter` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/sincityposter.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.skyfallposter` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/skyfallposter.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.staremptyblue` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/staremptyblue.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.staremptywhite` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/staremptywhite.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.starfilledblue` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/starfilledblue.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.starfilledwhite` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/starfilledwhite.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.header_blue` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="  &lt;color name=&quot;header_blue&quot;>#1EE9E9&lt;/color>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/values/styles.xml"
            line="3"
            column="10"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.color.footer_black` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="  &lt;color name=&quot;footer_black&quot;>#090808&lt;/color>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/values/styles.xml"
            line="4"
            column="10"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.thegodfather` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/thegodfather.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.themanfromearth` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/themanfromearth.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.themanfromuncle` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/themanfromuncle.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.theshashwankredemption` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/theshashwankredemption.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.toreviews` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/toreviews.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.raw.umbrella` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/raw/umbrella.mp3"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.usereight` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/usereight.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.userfive` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/userfive.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.userfour` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/userfour.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.usernine` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/usernine.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.userseven` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/userseven.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.usersix` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/usersix.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.userten` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/userten.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.userthree` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/userthree.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.usertwo` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/usertwo.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.zootopia` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/zootopia.png"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `TableRow` layout or its `TableLayout` parent is useless"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;TableRow>"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/allratingsreviewsinfoview.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `TableRow` layout or its `TableLayout` parent is useless"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;TableRow>"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieinfoview.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `RelativeLayout` layout or its `LinearLayout` parent is possibly useless; transfer the `background` attribute to the other view"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;RelativeLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="UselessParent"
        severity="Warning"
        message="This `TableRow` layout or its `TableLayout` parent is useless"
        category="Performance"
        priority="2"
        summary="Useless parent layout"
        explanation="A layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;TableRow>"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/sqlview.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="IconColors"
        severity="Warning"
        message="Action Bar icons should use a single gray color (`#333333` for light themes (with 60%/30% opacity for enabled/disabled), and `#FFFFFF` with opacity 80%/30% for dark themes"
        category="Usability:Icons"
        priority="6"
        summary="Icon colors do not follow the recommended visual style"
        explanation="Notification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: `ic_menu_` for action bar icons, `ic_stat_` for notification icons etc. These correspond to the naming conventions documented in http://developer.android.com/guide/practices/ui_guidelines/icon_design.html"
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/magnifyingglass.png"/>
    </issue>

    <issue
        id="IconLauncherShape"
        severity="Warning"
        message="Launcher icons should not fill every pixel of their square region; see the design guide for details"
        category="Usability:Icons"
        priority="6"
        summary="The launcher icon shape should use a distinct silhouette"
        explanation="According to the Android Design Guide (http://developer.android.com/design/style/iconography.html) your launcher icons should &quot;use a distinct silhouette&quot;, a &quot;three-dimensional, front view, with a slight perspective as if viewed from above, so that users perceive some depth.&quot;

The unique silhouette implies that your launcher icon should not be a filled square."
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/logo_launcher.png"/>
    </issue>

    <issue
        id="IconDipSize"
        severity="Warning"
        message="The image `ic_launcher.png` varies significantly in its density-independent (dip) size across the various density versions: drawable-ldpi/ic_launcher.png: 64x64 dp (48x48 px), drawable-mdpi/ic_launcher.png: 48x48 dp (48x48 px), drawable-hdpi/ic_launcher.png: 48x48 dp (72x72 px), drawable-xhdpi/ic_launcher.png: 48x48 dp (96x96 px)"
        category="Usability:Icons"
        priority="5"
        summary="Icon density-independent size validation"
        explanation="Checks the all icons which are provided in multiple densities, all compute to roughly the same density-independent pixel (`dip`) size. This catches errors where images are either placed in the wrong folder, or icons are changed to new sizes but some folders are forgotten.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-xhdpi/ic_launcher.png"/>
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-hdpi/ic_launcher.png"/>
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-mdpi/ic_launcher.png"/>
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-ldpi/ic_launcher.png"/>
    </issue>

    <issue
        id="IconDuplicatesConfig"
        severity="Warning"
        message="The `ic_launcher.png` icon has identical contents in the following configuration folders: drawable-ldpi, drawable-mdpi"
        category="Usability:Icons"
        priority="5"
        summary="Identical bitmaps across various configurations"
        explanation="If an icon is provided under different configuration parameters such as `drawable-hdpi` or `-v11`, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-mdpi/ic_launcher.png"/>
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-ldpi/ic_launcher.png"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-mdpi`: abc_ic_ab_back_mtrl_am_alpha.png, abc_ic_clear_mtrl_alpha.png, abc_ic_commit_search_api_mtrl_alpha.png, abc_ic_go_search_api_mtrl_alpha.png, abc_ic_menu_copy_mtrl_am_alpha.png... (48 more)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-mdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-xhdpi`: abc_ic_ab_back_mtrl_am_alpha.png, abc_ic_clear_mtrl_alpha.png, abc_ic_commit_search_api_mtrl_alpha.png, abc_ic_go_search_api_mtrl_alpha.png, abc_ic_menu_copy_mtrl_am_alpha.png... (48 more)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/drawable-xhdpi"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-xxhdpi, drawable-xxxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="    &lt;EditText"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/samplemain.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="      &lt;EditText"
        errorLine2="      ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="21"
            column="7"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="      &lt;EditText"
        errorLine2="      ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="41"
            column="7"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="      &lt;EditText"
        errorLine2="      ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="62"
            column="7"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="The view name (`@+id/etEmailId`) suggests this is an e-mail address, but it does not include &apos;`textEmail`&apos; in the `inputType`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="        android:id=&quot;@+id/etEmailId&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="73"
            column="9"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="      &lt;EditText"
        errorLine2="      ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="83"
            column="7"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="      &lt;EditText"
        errorLine2="      ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="105"
            column="7"/>
    </issue>

    <issue
        id="TextFields"
        severity="Warning"
        message="This text field does not specify an `inputType` or a `hint`"
        category="Usability"
        priority="5"
        summary="Missing `inputType` or `hint`"
        explanation="Providing an `inputType` attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). Similarly,a hint attribute displays a hint to the user for what is expected in the text field.

The lint detector also looks at the `id` of the view, and if the id offers a hint of the purpose of the field (for example, the `id` contains the phrase `phone` or `email`), then lint will also ensure that the `inputType` contains the corresponding type attributes.

If you really want to keep the text field generic, you can suppress this warning by setting `inputType=&quot;text&quot;`."
        errorLine1="      &lt;EditText"
        errorLine2="      ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="127"
            column="7"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="  &lt;ImageButton"
        errorLine2="  ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/actionbar_custom.xml"
            line="7"
            column="3"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="      &lt;ImageButton"
        errorLine2="      ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="56"
            column="7"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageButton"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="93"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageButton"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="55"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="  &lt;ImageView"
        errorLine2="  ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="8"
            column="3"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageButton"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/samplemain.xml"
            line="13"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageButton"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/samplemain.xml"
            line="19"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageView"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="58"
            column="5"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="    &lt;ImageButton"
        errorLine2="    ^"
        quickfix="studio,adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="88"
            column="5"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="No label views point to this text field with an `android:labelFor=&quot;@+id/@+id/etSearch&quot;` attribute"
        category="Accessibility"
        priority="2"
        summary="Missing `labelFor` attribute"
        explanation="Text fields should be labelled with a `labelFor` attribute, provided your `minSdkVersion` is at least 17.

If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="    &lt;EditText"
        errorLine2="    ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/samplemain.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="No label views point to this text field with an `android:labelFor=&quot;@+id/@+id/etFname&quot;` attribute"
        category="Accessibility"
        priority="2"
        summary="Missing `labelFor` attribute"
        explanation="Text fields should be labelled with a `labelFor` attribute, provided your `minSdkVersion` is at least 17.

If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="      &lt;EditText"
        errorLine2="      ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="21"
            column="7"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="No label views point to this text field with an `android:labelFor=&quot;@+id/@+id/etLname&quot;` attribute"
        category="Accessibility"
        priority="2"
        summary="Missing `labelFor` attribute"
        explanation="Text fields should be labelled with a `labelFor` attribute, provided your `minSdkVersion` is at least 17.

If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="      &lt;EditText"
        errorLine2="      ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="41"
            column="7"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="No label views point to this text field with an `android:labelFor=&quot;@+id/@+id/etEmailId&quot;` attribute"
        category="Accessibility"
        priority="2"
        summary="Missing `labelFor` attribute"
        explanation="Text fields should be labelled with a `labelFor` attribute, provided your `minSdkVersion` is at least 17.

If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="      &lt;EditText"
        errorLine2="      ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="62"
            column="7"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="No label views point to this text field with an `android:labelFor=&quot;@+id/@+id/etPassword&quot;` attribute"
        category="Accessibility"
        priority="2"
        summary="Missing `labelFor` attribute"
        explanation="Text fields should be labelled with a `labelFor` attribute, provided your `minSdkVersion` is at least 17.

If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="      &lt;EditText"
        errorLine2="      ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="83"
            column="7"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="No label views point to this text field with an `android:labelFor=&quot;@+id/@+id/etRePassword&quot;` attribute"
        category="Accessibility"
        priority="2"
        summary="Missing `labelFor` attribute"
        explanation="Text fields should be labelled with a `labelFor` attribute, provided your `minSdkVersion` is at least 17.

If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="      &lt;EditText"
        errorLine2="      ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="105"
            column="7"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="No label views point to this text field with an `android:labelFor=&quot;@+id/@+id/etUserPhoto&quot;` attribute"
        category="Accessibility"
        priority="2"
        summary="Missing `labelFor` attribute"
        explanation="Text fields should be labelled with a `labelFor` attribute, provided your `minSdkVersion` is at least 17.

If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="      &lt;EditText"
        errorLine2="      ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="127"
            column="7"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;User Email&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;User Email&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/allratingsreviewsinfoview.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Movie Name&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Movie Name&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/allratingsreviewsinfoview.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;User Rating&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;User Rating&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/allratingsreviewsinfoview.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;User Review&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;User Review&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/allratingsreviewsinfoview.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;from db Info&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;from db Info&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/allratingsreviewsinfoview.xml"
            line="38"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Write Review&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="      android:text=&quot;Write Review&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="72"
            column="7"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Email ID&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:hint=&quot;Email ID&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/login.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Password&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:hint=&quot;Password&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/login.xml"
            line="17"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;LOGIN&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;LOGIN&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/login.xml"
            line="26"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;SIGN UP&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;SIGN UP&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/login.xml"
            line="32"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Hello World!&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Hello World!&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/main.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Write Review&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Write Review&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="71"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Movie Name&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Movie Name&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieinfoview.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Movie Desc&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Movie Desc&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieinfoview.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Movie Rating&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Movie Rating&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieinfoview.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Movie Poster&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Movie Poster&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieinfoview.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;from db Info&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;from db Info&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieinfoview.xml"
            line="38"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;search&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:title=&quot;search&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/menu/options_menu.xml"
            line="4"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Hi Akhil, &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="      android:text=&quot;Hi Akhil, &quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/samplemain.xml"
            line="41"
            column="7"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;First Name: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;First Name: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;LastName: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;LastName: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="35"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Email ID: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Email ID: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="56"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Password: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Password: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="77"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Re-Enter Password: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Re-Enter Password: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="99"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;User Photo: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;User Photo: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="121"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;SUBMIT&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;SUBMIT&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="142"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;First Name&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;First Name&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/sqlview.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Last Name&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Last Name&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/sqlview.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Email ID&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Email ID&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/sqlview.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Password&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Password&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/sqlview.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;UserPhoto&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;UserPhoto&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/sqlview.xml"
            line="39"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;from db Info&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;from db Info&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/sqlview.xml"
            line="44"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Akhil&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="      android:text=&quot;Akhil&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="75"
            column="7"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Done&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Done&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="105"
            column="5"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Write Review...&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:hint=&quot;Write Review...&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="111"
            column="5"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Warning"
        message="`@id/tvUserName` can overlap `@id/frame_frag_container` if @id/tvUserName grows due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="    &lt;TextView"
        errorLine2="    ^">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/mainactivity.xml"
            line="16"
            column="5"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingLeft=&quot;20dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="36"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingLeft=&quot;20dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="54"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="          android:paddingLeft=&quot;20dp&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="109"
            column="11"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingLeft=&quot;20dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="129"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="44"
            column="5"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="          android:paddingLeft=&quot;20dp&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="34"
            column="11"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="          android:paddingLeft=&quot;20dp&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="53"
            column="11"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="46"
            column="5"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="28"
            column="7"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="48"
            column="7"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="74"
            column="7"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Warning"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Bi-directional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="96"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="34"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;20dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="36"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="53"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;20dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="54"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/movRatingBar&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/movRatingBar&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="60"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_gravity=&quot;right&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="71"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="98"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/bImgUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_toRightOf=&quot;@id/bImgUserPhoto&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="107"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:paddingLeft=&quot;20dp&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="109"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/bImgUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_toRightOf=&quot;@id/bImgUserPhoto&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="115"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;20dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="129"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentRight` with `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/induvidualreview.xml"
            line="138"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="13"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="30"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="42"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/listrow.xml"
            line="44"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/mainactivity.xml"
            line="21"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/mainactivity.xml"
            line="26"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentRight` with `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/mainactivity.xml"
            line="39"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="23"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="32"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:paddingLeft=&quot;20dp&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="34"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="39"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="52"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:paddingLeft=&quot;20dp&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="53"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/movRatingBar&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="          android:layout_toRightOf=&quot;@id/movRatingBar&quot;"
        errorLine2="          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="60"
            column="11"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_gravity=&quot;right&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="70"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentRight` with `android:layout_alignParentEnd=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movieactivity.xml"
            line="89"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="13"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/bImgUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_toRightOf=&quot;@id/bImgUserPhoto&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="25"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/bImgUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_toRightOf=&quot;@id/bImgUserPhoto&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="31"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/bImgUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_toRightOf=&quot;@id/bImgUserPhoto&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="44"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:paddingLeft=&quot;20dp&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/movierow.xml"
            line="46"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="17"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;150dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;150dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="19"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/tvFname&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/tvFname&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;150dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;150dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="39"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/tvLname&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/tvLname&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="45"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;150dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;150dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="60"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/tvEmailId&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/tvEmailId&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="66"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;150dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;150dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="81"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/tvPassword&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/tvPassword&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="88"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;150dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;150dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="103"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/tvRePassword&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/tvRePassword&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="110"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_marginLeft` with `android:layout_marginStart=&quot;150dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginLeft=&quot;150dp&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="125"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/tvUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@id/tvUserPhoto&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/signup.xml"
            line="131"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="17"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="26"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="28"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="34"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/nwImgMoviePoster&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_toRightOf=&quot;@id/nwImgMoviePoster&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="46"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="48"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_alignParentLeft` with `android:layout_alignParentStart=&quot;true&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="63"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/imgUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_toRightOf=&quot;@id/imgUserPhoto&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="72"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="74"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/imgUserPhoto&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_toRightOf=&quot;@id/imgUserPhoto&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="81"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:layout_toRightOf` with `android:layout_toEndOf=&quot;@id/userRatingBar&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:layout_toRightOf=&quot;@id/userRatingBar&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="93"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Consider replacing `android:paddingLeft` with `android:paddingStart=&quot;20dp&quot;` to better support right-to-left layouts"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="      android:paddingLeft=&quot;20dp&quot;"
        errorLine2="      ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="96"
            column="7"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Warning"
        message="Use &quot;`end`&quot; instead of &quot;`right`&quot; to ensure correct behavior in right-to-left locales"
        category="Bi-directional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.
For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. *NOTE*: If your `minSdkVersion` is less than 17, you should add *both* the older left/right attributes *as well as* the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.
(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_gravity=&quot;right&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/akhilesh/android/movieReviewsApp/app/src/main/res/layout/writereview.xml"
            line="104"
            column="5"/>
    </issue>

</issues>
